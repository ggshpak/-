from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = "6536490824:AAHEiK-rF90tM7LCmLZfHIYrOzjvSifCHz8"
data_file = "marathon_registrations.txt"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
class MarathonRegistration(StatesGroup):
    name = State()
    marathon_type = State()
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(types.KeyboardButton("–ü–æ–ª–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω"), types.KeyboardButton("–ü–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω"))
keyboard.add(types.KeyboardButton("10 –∫–º"))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω. üèÉ‚Äç‚ôÄÔ∏èüèÉ\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=types.ReplyKeyboardRemove())
    await MarathonRegistration.name.set()
@dp.message_handler(state=MarathonRegistration.name)
async def handle_name(message: types.Message, state: FSMContext):
    user_name = message.text
    await state.update_data(name=user_name)
    await message.answer(
        f"–ó–∞–ø–æ–º–Ω–∏–ª –≤–∞—à–µ –§–ò–û: {user_name}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–±–µ–≥–∞:",
        reply_markup=keyboard)
    await MarathonRegistration.next()
@dp.message_handler(state=MarathonRegistration.marathon_type)
async def handle_marathon_type(message: types.Message, state: FSMContext):
    marathon_type = message.text
    data = await state.get_data()
    user_name = data.get('name')
    with open(data_file, "a", encoding='utf-8') as f:
        f.write(f"–§–ò–û: {user_name}. –¢–∏–ø –∑–∞–±–µ–≥–∞: {marathon_type}\n")
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {marathon_type}! üëç\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω–µ! üéâ")
    await state.finish()
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)